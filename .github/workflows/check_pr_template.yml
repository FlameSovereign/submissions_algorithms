name: Check if PR Template Is Complete

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check_template:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR template
        id: check_template
        uses: actions/github-script@v6
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            
            // Debug logging
            console.log('PR Body length:', prBody.length);
            console.log('PR Body first 500 chars:', prBody.substring(0, 500));
            console.log('PR Body contains ```yaml:', prBody.includes('```yaml'));
            console.log('PR Body contains backticks:', prBody.split('```').length - 1);
            
            // Try multiple approaches to extract YAML
            let yamlContent = null;
            
            // Approach 1: Simple split
            const parts = prBody.split('```yaml\n');
            if (parts.length > 1) {
              const endParts = parts[1].split('```');
              if (endParts.length > 1) {
                yamlContent = endParts[0];
                console.log('Found YAML using split approach');
              }
            }
            
            // Approach 2: Regex if split failed
            if (!yamlContent) {
              const yamlMatch = prBody.match(/```yaml\n([\s\S]*?)\n```/);
              if (yamlMatch) {
                yamlContent = yamlMatch[1];
                console.log('Found YAML using regex approach');
              }
            }
            
            if (!yamlContent) {
              console.log('Failed to extract YAML section');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: ':warning: Could not find the YAML section in Pull Request. Please use the PR template and fill out all fields in the YAML section.'
              });
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['ðŸš§ Incomplete']
              });
              core.setFailed('YAML section not found');
              return;
            }
            
            console.log('Extracted YAML content:', yamlContent);
            
            const yaml = require('js-yaml');
            let data;
            try {
              data = yaml.load(yamlContent);
              console.log('Parsed YAML data:', data);
            } catch (error) {
              console.log('YAML parsing error:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `:warning: Error parsing YAML: ${error.message}`
              });
              core.setFailed(`Invalid YAML: ${error.message}`);
              return;
            }
            
            const requiredFields = [
              'submission_name',
              'submission_folder',
              'authors',
              'affiliations',
              'ruleset',
              'framework',
              'description'
            ];
            
            const emptyFields = requiredFields.filter(field => {
              const value = data?.[field];
              return !value || 
                     value.toString().trim() === '' || 
                     value === '""' ||
                     value === '\"\"';
            });
            
            if (emptyFields.length > 0) {
              const emptyFieldsList = emptyFields
                .map(field => `  - ${field} is empty`)
                .join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `:warning: Please fill out all required fields in the PR template:\n\n${emptyFieldsList}`
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['ðŸš§ Incomplete']
              });
              
              core.setFailed('Empty fields found');
              return;
            }
            
            // Remove incomplete label if present
            try {
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
              
              if (labels.some(label => label.name === 'ðŸš§ Incomplete')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  name: 'ðŸš§ Incomplete'
                });
              }
            } catch (error) {
              console.log('Error handling labels:', error);
            }
            
            core.setOutput('filled_out', 'true');
            core.setOutput('submission_data', data);