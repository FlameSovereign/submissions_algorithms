name: Check if PR Template Is Complete

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check_template:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR template
        id: check_template
        uses: actions/github-script@v6
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            
            // Extract YAML section
            const yamlMatch = prBody.match(/```yaml\n([\s\S]*?)```/);
            if (!yamlMatch) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: ':warning: Could not find YAML section in PR description. Please use the PR template.'
              });
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['ðŸš§ Incomplete']
              });
              core.setFailed('YAML section not found');
              return;
            }
            
            const yaml = require('js-yaml');
            let data;
            try {
              data = yaml.load(yamlMatch[1]);
            } catch (error) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `:warning: Error parsing YAML: ${error.message}`
              });
              core.setFailed(`Invalid YAML: ${error.message}`);
              return;
            }
            
            // Check required fields
            const requiredFields = [
              'submission_name',
              'submission_folder',
              'authors',
              'affiliations',
              'ruleset',
              'framework',
              'description'
            ];
            
            const emptyFields = requiredFields.filter(field => {
              const value = data[field];
              return !value || value.trim() === '' || value === '""';
            });
            
            if (emptyFields.length > 0) {
              const emptyFieldsList = emptyFields
                .map(field => `  - ${field} is empty`)
                .join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `:warning: Please fill out all required fields in the PR template:\n\n${emptyFieldsList}`
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['ðŸš§ Incomplete']
              });
              
              core.setFailed('Empty fields found');
              return;
            }
            
            // If we get here, all fields are filled out
            try {
              // Try to remove the incomplete label if it exists
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
              
              if (labels.some(label => label.name === 'ðŸš§ Incomplete')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  name: 'ðŸš§ Incomplete'
                });
              }
            } catch (error) {
              // Ignore errors when trying to remove non-existent label
            }
            
            core.setOutput('filled_out', 'true');
            core.setOutput('submission_data', data);