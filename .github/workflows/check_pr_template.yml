name: Check if PR Template Is Complete

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check_template:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install js-yaml

      - name: Check PR template and create submission file
        id: check_template
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs     = require('fs').promises;
            const yaml   = require('js-yaml');
            const core   = require('@actions/core');
            const prBody = context.payload.pull_request.body || '';

            // 使用 HTML 注释标记
            const startMarker = '<!--- Submission Info Start -->';
            const endMarker   = '<!--- Submission Info End -->';

            const startIndex = prBody.indexOf(startMarker);
            if (startIndex === -1) {
              core.setFailed('Start marker not found');
              return;
            }
            const contentStart = startIndex + startMarker.length;
            const endIndex     = prBody.indexOf(endMarker, contentStart);
            if (endIndex === -1) {
              core.setFailed('End marker not found');
              return;
            }

            // 提取两标记之间的内容
            const section = prBody
              .slice(contentStart, endIndex)
              .trim();
            console.log('Extracted YAML section:\n', section);

            // 清洗注释并解析 YAML
            let data;
            try {
              const cleanYaml = section
                .split('\n')
                .map(line => line.replace(/#.*$/, '').trim())
                .filter(line => line)
                .join('\n');
              data = yaml.load(cleanYaml);
            } catch (err) {
              await github.rest.issues.createComment({
                owner:       context.repo.owner,
                repo:        context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body:        `:warning: Failed to parse submission YAML: ${err.message}`
              });
              core.setFailed(`Invalid YAML: ${err.message}`);
              return;
            }

            // 必填字段校验
            const required = [
              'submission_name',
              'submission_folder',
              'authors',
              'affiliations',
              'ruleset',
              'framework',
              'description'
            ];
            const missing = required.filter(f => {
              const v = data?.[f];
              return !v || v.toString().trim() === '' || v === '""';
            });
            if (missing.length > 0) {
              const list = missing.map(f => `- ${f} is empty`).join('\n');
              await github.rest.issues.createComment({
                owner:        context.repo.owner,
                repo:         context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body:         `:warning: Please fill out all required fields:\n${list}`
              });
              await github.rest.issues.addLabels({
                owner:        context.repo.owner,
                repo:         context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels:       ['🚧 Incomplete']
              });
              core.setFailed('Empty fields found');
              return;
            }

            // 如果之前打了 Incomplete 标签，删掉它
            try {
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner:        context.repo.owner,
                repo:         context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
              if (labels.some(l => l.name === '🚧 Incomplete')) {
                await github.rest.issues.removeLabel({
                  owner:        context.repo.owner,
                  repo:         context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  name:         '🚧 Incomplete'
                });
              }
            } catch {}

            // 生成 submissions/.../submission_info.yml
            const folder = data.submission_folder.replace(/^\/+|\/+$/g, '')
              .replace(/^(external_tuning|self_tuning)\//, '');
            let subPath;
            if (data.ruleset === 'external') {
              subPath = `submissions/external_tuning/${folder}`;
            } else {
              subPath = `submissions/self_tuning/${folder}`;
            }
            await fs.mkdir(subPath, { recursive: true });
            const yamlStr = yaml.dump(data);
            await fs.writeFile(`${subPath}/submission_info.yml`, yamlStr);
            console.log('Created', `${subPath}/submission_info.yml`);

            core.setOutput('filled_out', 'true');
            core.setOutput('submission_data', data);

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name  "GitHub Action"
          git add submissions/**/submission_info.yml
          if ! git diff --staged --quiet; then
            git commit -m "Add/Update submission_info.yml" \
                       -m "Automated commit by GitHub Action"
            git push
          fi
